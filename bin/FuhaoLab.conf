#!/bin/bash

### CONSTANT
# MODULEFILENAME = environment-module output file, default: ${PROGPATH}/bin/modules/$PackageName/$PackageVers

### Please configure ###

if [ -z "$PROGPATH" ]; then
	if [ ! -z "$PROGRAMHOME" ]; then
		export PROGPATH=$PROGRAMHOME;
	else
		export PROGPATH=${HOME}/Programs;
	fi
fi
if [ -z "$BIODATABASES" ]; then
	export BIODATABASES=${HOME}/Databases;
fi
if [ -z "$InstallPlatform" ]; then
	InstallPlatform='PC'
fi
if [ -z "$EnvironFilePath" ]; then
	export EnvironFilePath=${HOME}/.bashrc
fi
if [ ! -z "$MODULEFILEPATH" ]; then
	ModuleFilesPath=$MODULEFILEPATH
else
	ModuleFilesPath=${PROGPATH}/bin/modules
fi


####### Defaults ##############
installLib=0;
debugMode=0;
testPrintNotice=0
NoticeContent="### Info: Run following command if you want it in effect immediately"
DecompressFolder='source'
testWriteEnvironModules=1
testWriteModuleHeader=0
### Configure End ###


if [ ! -d ${PROGPATH}/bin ]; then
	mkdir -p ${PROGPATH}/bin
	export PATH=${PROGPATH}/bin:$PATH
	echo "export PATH=${PROGPATH}/bin:\$PATH" >> ${HOME}/.bashrc
fi
if [ ! -d ${ModuleFilesPath} ]; then
	mkdir -p ${ModuleFilesPath}
	export MODULEPATH=${ModuleFilesPath}:$MODULEPATH
	echo "export MODULEPATH=${ModuleFilesPath}:\$MODULEPATH" >> ${HOME}/.bashrc
fi


function CmdExists {
  if command -v $1 >/dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}


###Please configure InstallPlatform
# For Linux cluster, choose HPC
#InstallPlatform='HPC'
#For personal PC or workstation
#InstallPlatform='PC'
function getEnvFilePath {
	if [ ! -z "$ENVIRONFILEPATH" ]; then
		EnvironFilePath=$ENVIRONFILEPATH
	else
		if [[ $InstallPlatform == "PC" ]]; then
			EnvironFilePath=${HOME}/.bashrc
		elif [[ $InstallPlatform == "HPC" ]]; then
			if [ $installLib -eq 1 ]; then
				if [ ! -d ${PROGPATH}/libraries/bin ]; then
					mkdir -p ${PROGPATH}/libraries/bin/modules
				fi
				EnvironFilePath=$PROGPATH/libraries/bin/$PackageName-$PackageVers
			else
				if [ ! -d ${PROGPATH}/bin ]; then
					mkdir -p ${PROGPATH}/bin/modules
				fi
				EnvironFilePath=$PROGPATH/bin/$PackageName-$PackageVers
			fi
		else
			EnvironFilePath=${HOME}/.bashrc
		fi
	fi

	return 0
}
function getModFilePath {
	local MFPsubinfo="getModFilePath"

	if [ ! -z "$MODULEFILENAME" ]; then
		ModuleFilesName=$MODULEFILENAME
	else
		if [ $debugMode -ne 0 ]; then
			echo "Debug($MFPsubinfo): installLib: $installLib "
		fi
		if [ $installLib -eq 1 ]; then
			ModuleFilesName=${PROGPATH}/libraries/bin/modules/$PackageName/$PackageVers
		else
			ModuleFilesName=${PROGPATH}/bin/modules/$PackageName/$PackageVers
		fi
	fi
	if [ $debugMode -ne 0 ]; then
		echo "Debug($MFPsubinfo): ModuleFilesName: $ModuleFilesName"
	fi

	return 0
}


### Print important info
function PrintInfo {
	local PTmessage=$1
	
	echo -e "\033[42;31m${PTmessage}\033[0m"
	return 0
}
### Print important info
function PrintError {
	local PTmessage=$1
	
	echo -e "\033[41;37m${PTmessage}\033[0m" >&2
	return 0
}



###echo color
#Black        0;30     Dark Gray     1;30
#Red          0;31     Light Red     1;31
#Green        0;32     Light Green   1;32
#Brown/Orange 0;33     Yellow        1;33
#Blue         0;34     Light Blue    1;34
#Purple       0;35     Light Purple  1;35
#Cyan         0;36     Light Cyan    1;36
#Light Gray   0;37     White         1;37
#RED=\'\033[0;31m\'
#NC=\'\033[0m\' # No Color
#printf "I ${RED}love${NC} Stack Overflow\n"
function RunCmds {
	RCcmd=$1;
	
	PrintInfo "$RCcmd"
	$RCcmd
	if [ $? -ne 0 ]; then
		PrintError "Error: cmd failed"
		echo "CMD: $RCcmd" >&2
		exit 100
	else
		return 0
	fi
}


if [ ! -z "$MACHTYPE" ]; then
	MTemp=${MACHTYPE%%-*}
	export MACHTYPE=$MTemp
elif [ ! -z $(uname -m) ]; then
	export MACHTYPE=$(uname -m)
else
	PrintError "Warnings: unknown MACHTYPE, set to default x86_64" >&2
	export MACHTYPE="x86_64"
fi


### change to install path
function CheckPath {
	local CPname=$1
	local CPvers=$2
	
	local CPinstall_path=$PROGPATH/$CPname/$CPvers
	PrintInfo "Installing Path: $CPinstall_path"

	if [ ! -d $CPinstall_path ]; then
		mkdir -p $CPinstall_path
	fi
	cd $CPinstall_path
	return 0;
}

### change to install LIB path
function CheckLibPath {
	local CPname=$1
	local CPvers=$2
	
	installLib=1
	local CPinstall_path=${PROGPATH}/libraries/$CPname/$CPvers
	echo "Install Path: $CPinstall_path"

	if [ ! -d $CPinstall_path ]; then
		mkdir -p $CPinstall_path
	fi
	
	cd $CPinstall_path
	
	return 0;
}


### Download using wget
function DownloadWget {
	local DWlink=$1
	local DWname=$2
	
	
	if [ ! -s $DWname ]; then
		PrintInfo "Downloading $DWname"
		PrintInfo "       from $DWlink"
		wget --tries 5 -c $DWlink -O $DWname
		if [ $?  -ne 0 ]; then
			PrintError "Error: failed to download package $DWname"
			PrintError "CMD used: wget -c $DWlink -O $DWname"
			PrintInfo  "Please retry or manually download the package from $DWlink, "
			PrintInfo  "    and rename it to $DWname"
			if [ -e $DWname ]; then
				rm -rf $DWname >/dev/null 2>&1
			fi
			exit 100
		fi
	else
		PrintInfo "Info: existing $DWname"
	fi
	
	return 0
}



### Environment
function AddEnvironVariable {
	local EVpath=$1
	local EVcomt=$2
	
	ModuleInitiate
	getEnvFilePath
	echo -e "\n\n\n"
	echo "### $EVcomt" >> $EnvironFilePath
	if [ -d $EVpath/bin ]; then
		if [ $testPrintNotice -eq 0 ]; then
			PrintInfo "$NoticeContent"
			testPrintNotice=1
		fi
		PrintInfo "export PATH=$EVpath/bin:\$PATH"
		echo "#Info: adding to PATH to $EnvironFilePath"
		echo "export PATH=$EVpath/bin:\$PATH" >> $EnvironFilePath
		ModuleAppend "prepend-path    PATH    $EVpath/bin"
	else
		local -a ExcArr=()
		ExcArr=($(find $EVpath/ -maxdepth 1 -perm /+x -type f))
		if [ ${#ExcArr[@]} -gt 0 ]; then
			if [ $testPrintNotice -eq 0 ]; then
				PrintInfo "$NoticeContent"
				testPrintNotice=1
			fi
			PrintInfo "export PATH=$EVpath:\$PATH"
			echo "#Info: adding to PATH to $EnvironFilePath"
			echo "export PATH=$EVpath:\$PATH" >> $EnvironFilePath
			ModuleAppend "prepend-path    PATH    $EVpath"
		else
			PrintError "Warnings: no executables in $EVpath"
		fi
	fi
	
	if [ -d $EVpath/lib ]; then
		if [ $testPrintNotice -eq 0 ]; then
			PrintInfo "$NoticeContent"
			testPrintNotice=1
		fi
		PrintInfo "export LIBRARY_PATH=$EVpath/lib:\$LIBRARY_PATH"
		PrintInfo "export LD_LIBRARY_PATH=$EVpath/lib:\$LD_LIBRARY_PATH"
		echo "#Info: adding Libs to $EnvironFilePath"
		echo "export LIBRARY_PATH=$EVpath/lib:\$LIBRARY_PATH" >> $EnvironFilePath
		ModuleAppend "prepend-path    LIBRARY_PATH    $EVpath/lib"
		echo "export LD_LIBRARY_PATH=$EVpath/lib:\$LD_LIBRARY_PATH" >> $EnvironFilePath
		ModuleAppend "prepend-path    LD_LIBRARY_PATH    $EVpath/lib"
		
		if [ -d $EVpath/lib/pkgconfig ]; then
			if [ $testPrintNotice -eq 0 ]; then
				PrintInfo "$NoticeContent"
				testPrintNotice=1
			fi
			PrintInfo "export PKG_CONFIG_PATH=$EVpath/lib/pkgconfig:\$PKG_CONFIG_PATH"
			echo "#Info: adding Libs to $EnvironFilePath"
			echo "export PKG_CONFIG_PATH=$EVpath/lib/pkgconfig:\$PKG_CONFIG_PATH" >> $EnvironFilePath
			ModuleAppend "prepend-path    PKG_CONFIG_PATH    $EVpath/lib/pkgconfig"
		fi
	fi
	if [ -d $EVpath/include ]; then
		if [ $testPrintNotice -eq 0 ]; then
			PrintInfo "$NoticeContent"
			testPrintNotice=1
		fi
		PrintInfo "export C_INCLUDE_PATH=$EVpath/include:\$C_INCLUDE_PATH"
		PrintInfo "export CPLUS_INCLUDE_PATH=$EVpath/include:\$CPLUS_INCLUDE_PATH"
		echo "#Info: adding headers to $EnvironFilePath"
		echo "export C_INCLUDE_PATH=$EVpath/include:\$C_INCLUDE_PATH" >> $EnvironFilePath
		ModuleAppend "prepend-path    C_INCLUDE_PATH    $EVpath/include"
		echo "export CPLUS_INCLUDE_PATH=$EVpath/include:\$CPLUS_INCLUDE_PATH" >> $EnvironFilePath
		ModuleAppend "prepend-path    CPLUS_INCLUDE_PATH    $EVpath/include"
	fi
	if [ -d $EVpath/share/man ]; then
		if [ $testPrintNotice -eq 0 ]; then
			PrintInfo "$NoticeContent"
			testPrintNotice=1
		fi
		PrintInfo "export MANPATH=$EVpath/share/man:\$MANPATH"
		echo "#Info: adding headers to $EnvironFilePath"
		echo "export MANPATH=$EVpath/share/man:\$MANPATH" >> $EnvironFilePath
		ModuleAppend "prepend-path    MANPATH    $EVpath/share/man"
	fi


	return 0
}



function AddBashrc {
	local ABstr=$1
	
	getEnvFilePath
	if [ $testPrintNotice -eq 0 ]; then
		PrintInfo "$NoticeContent"
		testPrintNotice=1
	fi
	PrintInfo "$ABstr"
	echo "$ABstr" >> $EnvironFilePath
	
	return 0
}



function CheckPythonModules {
	local CMname=($@)
	
	for CPMind in ${CMname[@]}; do
		python3 -c "import $CPMind" >/dev/null 2>&1
		if [ $? -ne 0 ]; then
			RunCmds "pip3 install --user $CPMind"
		fi
	done

	return 0
}



function DeletePath {
	local DParr=($@)
	
#	echo "Deleting path"
	for DPinddir in ${DParr[@]}; do
#		echo "Deleting path: $DPinddir"
		if [ -d "$DPinddir" ]; then
			rm -rf $DPinddir > /dev/null 2>&1
		fi
	done
	
	return 0
}
function DeleteCreatePath {
	local DParr=($@)
	
#	echo "Deleting path"
	for DPinddir in ${DParr[@]}; do
#		echo "Deleting path: $DPinddir"
		if [ -d "$DPinddir" ]; then
			RunCmds "rm -rf \"$DPinddir\""
		fi
		if [ ! -d "$DPinddir" ]; then
			RunCmds "mkdir -p $DPinddir"
		fi
	done
	
	return 0
}
function CreatePath {
	local CPpath=($@)
	
	for CPinddir in ${CPpath[@]}; do
#		echo "Creating path: $CPinddir"
		if [ ! -d "$CPinddir" ]; then
			RunCmds "mkdir -p $CPinddir"
		fi
	done
	
	return 0
}



function Md5Check {
	local MCfile=$1
	
	md5sum -c $MCfile
	if [ $? -eq 0 ]; then
		return 0
	elif [ $? -eq 0 ]; then
		PrintError "Error: md5 Not match"
		exit 100
	else
		PrintError "Error: failed to run md5sum"
		exit 200
	fi
}
function Sha1Check {
	local MCfile=$1
	
	PrintInfo "Info: checking SHA1: $MCfile"
	sha1sum -c $MCfile
	if [ $? -eq 0 ]; then
		return 0
	elif [ $? -eq 0 ]; then
		PrintError "Error: SHA1 Not match"
		exit 100
	else
		PrintError "Error: failed to run sha1"
		exit 200
	fi
}



function TopFolderName {
	local UFfile=$1
	local -a UFarr=()
	
	if [[ "$UFfile" =~ *.[tT][aA][rR].[gG][zZ]$ ]]; then
		tar -pxzvf $UFfile >$UFfile.tar.log 2>&1
		if [ $? -ne 0 ]; then
			UFarr=($(cat $UFfile.tar.log | cut -f 1 -d'/' | sort -u))
			for UFind in ${UFarr[@]}; do
				rm -rf $UFind >/dev/null 2>&1
			done
			PrintError "Error: uncompress error using tar: $UFfile"
			rm -rf $UFfile.tar.log >/dev/null 2>&1
			exit 100
		else
			rm -rf $UFfile.tar.log >/dev/null 2>&1
			return 0
		fi
	elif [[ "$UFfile" =~ *.[zZ][iI][pP]$ ]]; then
		unzip $UFfile > $UFfile.unzip.log
		if [ $? -ne 0 ]; then
			UFarr=($(cat $UFfile.unzip.log | grep ^'   creating\|  inflating' | sed 's/^[ ]*creating:\s\+//;s/^[ ]*inflating:\s\+//;' | cut -f 1 -d'/' | sort -u))
			for UFind in ${UFarr[@]}; do
				rm -rf $UFind >/dev/null 2>&1
			done
			PrintError "Error: uncompress error using unzip: $UFfile"
			rm -rf $UFfile.unzip.log >/dev/null 2>&1
			exit 100
		else
			rm -rf $UFfile.unzip.log >/dev/null 2>&1
			return 0
		fi
	fi
}



function DecompressFile {
	local UFfile=$1
	local -a UFarr=()
	
	if [[ "$UFfile" =~ .*\.[tT][aA][rR].[gG][zZ]$ ]]; then
		echo "Info: tar.gz file: $UFfile"
		tar -pxzvf $UFfile >$UFfile.tar.log 2>&1
		if [ $? -ne 0 ]; then
			UFarr=($(cat $UFfile.tar.log | cut -f 1 -d'/' | sort -u))
			for UFind in ${UFarr[@]}; do
				rm -rf $UFind >/dev/null 2>&1
			done
			PrintError "Error: uncompress error using tar: $UFfile"
			rm -rf $UFfile.tar.log >/dev/null 2>&1
			exit 100
		else
			rm -rf $UFfile.tar.log >/dev/null 2>&1
			return 0
		fi
	elif [[ "$UFfile" =~ .*\.[zZ][iI][pP]$ ]]; then
		echo "Info: zip file: $UFfile"
		unzip $UFfile > $UFfile.unzip.log
		if [ $? -ne 0 ]; then
			UFarr=($(cat $UFfile.unzip.log | grep ^'   creating\|  inflating' | sed 's/^[ ]*creating:\s\+//;s/^[ ]*inflating:\s\+//;' | cut -f 1 -d'/' | sort -u))
			for UFind in ${UFarr[@]}; do
				rm -rf $UFind >/dev/null 2>&1
			done
			PrintError "Error: uncompress error using unzip: $UFfile"
			rm -rf $UFfile.unzip.log >/dev/null 2>&1
			exit 100
		else
			rm -rf $UFfile.unzip.log >/dev/null 2>&1
			return 0
		fi
	else
		PrintError "Error: uknown format to decompress: $UFfile"
		exit 100
	fi
}


function LibExist {
	local -a LElibname=("$@")
	
	for IndLib in "${LElibname[@]}"; do
		if ldconfig -p | grep "$IndLib"; then
			PrintInfo "Info: required LIB detected: $IndLib"
		else
			PrintError "Error: required LIB NOT found: $IndLib"
			exit 100
		fi
	done
	
	return 0
}
function SoftExist {
	local -a SElibname=("$@")
	
	for IndLib in "${SElibname[@]}"; do
		if dpkg -l "$IndLib"; then
			PrintInfo "Info: required package detected: $IndLib"
		else
			PrintError "Error: required package NOT found: $IndLib"
			exit 100
		fi
	done
	
	return 0
}
function perlModExist {
	local -a PMElibname=("$@")
	local PMEtest_not_install=0;
	
	for PMEIndLib in "${SElibname[@]}"; do
		if perl -M$PMEIndLib -e ';' > /dev/null 2>&1; then
			PrintInfo "Info: required Perl Module detected: $PMEIndLib"
		else
			PrintError "Error: required Perl Module NOT found: $PMEIndLib"
			PMEtest_not_install=1
		fi
	done
	
	if [ $PMEtest_not_install -eq 0 ]; then
		return 0
	else
		exit 100
	fi
}
### Find Python Libs
function FindPythonLib {
	local FPLpath=$1
	
	local FPLLibs=($(find $FPLpath -type d -name 'site-packages'))
	if [ ${#FPLLibs[@]} -eq 1 ] && [ -d "${FPLLibs[0]}" ]; then
		PythonLibPath=${FPLLibs[0]}
		return 0
	elif [ ${#FPLLibs[@]} -lt 1 ]; then
		PrintError "Error: Python Lib not found under $FPLpath"
		exit 100
	elif [ ${#FPLLibs[@]} -gt 1 ]; then
		PrintError "Error: Multiple Python Lib found under $FPLpath"
		exit 100
	fi
}




### write environment-module header
function ModuleInitiate {
	getModFilePath
	local MIpath=$(dirname $ModuleFilesName)
	CreatePath "$MIpath"
	if [ ! -d $MIpath ]; then
		PrintError "Error: can NOT create path for $ModuleFilesName"
		exit 100
	fi
	if [ $testWriteModuleHeader -eq 0 ]; then
		echo -e "#%Module 1.0\n" > $ModuleFilesName
		if [ $? -ne 0 ]; then
			echo "Error: can NOT write into modulefile: $ModuleFilesName"
			exit 100
		fi
		testWriteModuleHeader=1;
		echo "" >> $ModuleFilesName
		echo "if [ module-info mode load ] {" >> $ModuleFilesName
		echo "    puts stderr \"### Module Info ### Loading $PackageName/$PackageVers\"" >> $ModuleFilesName
		echo "}" >> $ModuleFilesName
		
	fi
	
	return 0
}
function ModuleAppend {
	local MAtext=$1
	
	local MAdebugMode=0;
	
	if [ $testWriteModuleHeader -eq 0 ]; then
		ModuleInitiate
		testWriteModuleHeader=1;
	fi
	echo "$MAtext" >> $ModuleFilesName
	
	if [[ "$MAtext" =~ ^set ]]; then
		if [ $debugMode -ne 0 ] || [ $MAdebugMode -ne 0 ]; then
			echo "Set Environment variable"
		fi
		local MAlinenum=$(grep -n ^'    puts' $ModuleFilesName | tail -n 1 | cut -f 1 -d:)
		if [ $debugMode -ne 0 ] || [ $MAdebugMode -ne 0 ]; then
			echo "    Line number: $MAlinenum"
		fi
		if [ ! -z "$MAlinenum" ] && [[ "$MAlinenum" =~ ^[0-9]+$ ]]; then
			((MAlinenum++))
			local MAhelp=$(echo $MAtext | sed 's/^\w\+\s\+//g;s/\s\+/=/g;')
			if [ $debugMode -ne 0 ] || [ $MAdebugMode -ne 0 ]; then
				echo "    Line number: $MAlinenum"
				echo "    HELP message: $MAhelp"
			fi
			sed -i "$MAlinenum i \    puts    stderr    \"set  $MAhelp\"" $ModuleFilesName
		fi
	fi
	
	return 0
}
###ModuleAppend "prereq    fastqc"
###ModuleAppend "prepend-path    PATH    xxx"
###ModuleAppend "setenv    XXX    xxx"
###ModuleAppend "set-alias    cpanm    \"cpanm --sudo --mirror http://mirrors.163.com/cpan --mirror-only\""



function PerlUpdateHeader {
	local -a PUHarr=($@)
	
	for PUHind in ${PUHarr[@]}; do
		echo "    Info: update perl header $PUHind"
		sed -i '1s/^#!\/usr\/bin\/perl$/#!\/usr\/bin\/env perl/' $PUHind
		if [ $? -ne 0 ]; then
			exit 100
		fi
	done
	
	return 0
}

